/***********************************************************
 Header         : bizfunc.h
 Function       : Biz Header
 Create Date    : 2011. 03. 02
 Last Edited    : 2011. 03. 02 
 Finish Date    : Not Yet 
 Creator        : by DongHan Kim 
***********************************************************/
/***********************************************************
    Include Header
***********************************************************/
#include "main.h"
#include "bizfunc.h"

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE "sqlca.h";
EXEC SQL INCLUDE "oraca.h";
EXEC SQL INCLUDE "sqlcpr.h";

/* SQL MACRO  */
#define SQLCODE         sqlca.sqlcode
#define SQLERRM         sqlca.sqlerrm.sqlerrmc
#define SQLCOUNT        sqlca.sqlerrd[2]
#define SQLNODATA       1403
#define SQLNULL         -1405
#define SQLDUP          -1
#define SQLOK           0

/***********************************************************
    주가 생성 MAIN RUNNER
***********************************************************/
int StockCreateRunner( char *StockNo ) {

	STOCK_INFO_RSLT st_stock_info_rslt;
	memset( (char *)&st_stock_info_rslt, 0x00, sizeof(STOCK_INFO_RSLT) );
	
	//-------------------------------------------------------------------------
	// 종목정보 DB 조회
	char lc_STOCK_NO [6+1] = { 0x00, };
	memset(lc_STOCK_NO,0x00,7);
	
	if( StockNo[0] != NULL ) {
		
		strncpy( lc_STOCK_NO, StockNo, 6 );
		
		log_printf( LOG_ARG,">>>>>>>>>>>>>>>>>>>>>>>>>" );
		log_printf( LOG_ARG," 입력종목번호 :[%s]", lc_STOCK_NO );
		log_printf( LOG_ARG,">>>>>>>>>>>>>>>>>>>>>>>>>" );
	
	} 
	
	//---------------------------------------------------------------
	// DECLARE CURSOR
	EXEC SQL DECLARE STOCK_INFO CURSOR FOR 
	SELECT STOCK_NO
		  ,STOCK_NM
		  ,OPEN_DT
		  ,AREA_NM
	 FROM TB_STOCK_BASE
	WHERE 1 = 1
	  AND (:StockNo IS NULL OR STOCK_NO = :StockNo)
	ORDER BY STOCK_NO,OPEN_DT
	;
	
	if( SQLCODE != SQLOK ) {
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"커서 STOCK_INFO 선언시 에러발생 [%d]-[%s]", SQLCODE, SQLERRM );
		log_printf( ERR_ARG,"-------------------------" );
    }
	
	//---------------------------------------------------------------
	// OPEN CURSOR
	EXEC SQL OPEN STOCK_INFO;

	if( SQLCODE != SQLOK ) {
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"커서 STOCK_INFO 오픈시 에러발생 [%d]-[%s]", SQLCODE, SQLERRM );
		log_printf( ERR_ARG,"-------------------------" );
    }
	
	//---------------------------------------------------------------
	// FETCH CURSOR
	int li_FetchCount = 0;
	
	int isLoop = TRUE;
	
	//---------------------------------------------------------------
	while( isLoop ) {
	
		//---------------------------------------------------------------
		// FETCH STRUCT INIT
		memset( (char *)&st_stock_info_rslt, 0x00, sizeof(STOCK_INFO_RSLT) );
		
		//---------------------------------------------------------------
		// FETCH
		EXEC SQL FETCH STOCK_INFO INTO :st_stock_info_rslt;
		
		if(SQLCODE != SQLOK && SQLCODE != SQLNODATA) {

			log_printf( ERR_ARG,"커서 STOCK_INFO FETCH 에러발생 [%d]-[%s]", SQLCODE, SQLERRM );
            isLoop = FALSE;
			EXEC SQL CLOSE STOCK_INFO;

		} else if(SQLCODE == SQLNODATA ) {
		
			isLoop = FALSE;
            break;
			
		}
		//---------------------------------------------------------------
		// USING FETCH DATA DO
		// 입력된 기초 정보로 주가생성 시작
		CreateVirtualStockData( &st_stock_info_rslt );
			
		//---------------------------------------------------------------
		li_FetchCount++;
	}
	// END OF WHILE

	//---------------------------------------------------------------
	// CLOSE CURSOR	
	EXEC SQL CLOSE STOCK_INFO;
	
	//-------------------------------------------------------------------------
	return (RETURN_TRUE);
}


/***********************************************************
    종목별 주가 생성
***********************************************************/
int CreateVirtualStockData( STOCK_INFO_RSLT *stock_info_rslt )
{
	//-------------------------------------------------------------------------
	// 기초정보 디버그 출력
	PrintStockInfoData( stock_info_rslt );
	
	//-------------------------------------------------------------------------
	// 주가 생성 MAIN FUNCION
	CalculateStockData( stock_info_rslt );
	
	return (RETURN_TRUE);
}

/***********************************************************
    주가 생성 MAIN FUNCION
***********************************************************/
int CalculateStockData( STOCK_INFO_RSLT *stock_info_rslt )
{
	int i = 0; /* FOR LOOP */
	int rtn = TRUE;
	
    STOCK_BASE st_stock_base;
    
    memset( (char *)&st_stock_base, 0x00,   sizeof(STOCK_BASE) );
	//-------------------------------------------------------------------------
	// 주가 기본 정보 생성 시작
	
	//-------------------------------------------------------------------------
	// 기초정보 조회 및 입력
	int li_StockCount = 0; // 종목갯수
		
	//---------------------------------------------------------------
	// 기초 정보 생성 테스트용
	st_stock_base.StrtPrice  = 10000; 	// 시작가   
	st_stock_base.ChngRatio  = 2.00;	// 변화비율 
	st_stock_base.CalcType   = 1; 		// 계산방식 
	st_stock_base.PrblDist   = 1; 		// 확률분포 
	st_stock_base.LevyAlpha  = 1.7; 	// LEVY 알파
	st_stock_base.LevyFactor = 2; 		// LEVY 팩터
	st_stock_base.Days       = 252; 	// 계산일수 
	
	//---------------------------------------------------------------
	// 기초 정보 체크
	
	// 시작단가 500원 이상
	if( st_stock_base.StrtPrice < 500 ) {
	
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"시작가격은 500보다 커야함" );
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"시작가      :[%ld]"     ,st_stock_base.StrtPrice  );
		log_printf( ERR_ARG,"-------------------------" );
		
		return (RETURN_FALSE);
	}
	
	// 변화비율
	if( st_stock_base.ChngRatio < 1.00 ) {
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"변화비율은 1.0보다 커야함" );
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"변화비율    :[%04f]"    ,st_stock_base.ChngRatio  );
		log_printf( ERR_ARG,"-------------------------" );
		return (RETURN_FALSE);
	}
	
	// 계산방식
	if( !(	st_stock_base.CalcType == 0 ||
			st_stock_base.CalcType == 1 ||
			st_stock_base.CalcType == 2 ) ) {
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"계산방식 0/1/2 만 사용됨" );
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"변화비율    :[%04f]"    ,st_stock_base.ChngRatio  );
		log_printf( ERR_ARG,"-------------------------" );
		return (RETURN_FALSE);
	}
	
	// 확률분포
	if( !(	st_stock_base.PrblDist == 0 ||
			st_stock_base.PrblDist == 1 ||
			st_stock_base.PrblDist == 2 ) ) {
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"확률분포 0/1/2 만 사용됨" );
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"변화비율    :[%04f]"    ,st_stock_base.PrblDist  );
		log_printf( ERR_ARG,"-------------------------" );
		return (RETURN_FALSE);
	}
	
	// LEVY 알파/팩터 체크 (확률분포 1일때만
	if( st_stock_base.PrblDist == 1 &&
		( st_stock_base.LevyAlpha <= 0 || st_stock_base.LevyFactor > 2 )) {
	
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"LEVY 알파는 1.0 보다 커야하고 팩터보다 작아야함" );
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"LEVY 알파    :[%04f]"    ,st_stock_base.LevyAlpha   );
		log_printf( ERR_ARG,"LEVY 팩터    :[%04f]"    ,st_stock_base.LevyFactor  );
		log_printf( ERR_ARG,"-------------------------" );
		
		return (RETURN_FALSE);
	
	}
	
	// 생성일
	if( st_stock_base.Days < 1 ) {
	
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"계산일수은 1보다 커야함" );
		log_printf( ERR_ARG,"-------------------------" );
		log_printf( ERR_ARG,"계산일수    :[%ld]"     ,st_stock_base.Days   );
		log_printf( ERR_ARG,"-------------------------" );
		
		return (RETURN_FALSE);
	}
	
	//-------------------------------------------------------------------------
	// 종목 기본 정보 출력
	PrintStockBaseData( &st_stock_base );
	
	//-------------------------------------------------------------------------
	// 일수만큼 STOCK DATA 변수 MALLOC
	long *li_StockPrice = NULL;
	li_StockPrice = (long *)malloc( sizeof(long) * st_stock_base.Days );
	
	//-------------------------------------------------------------------------
	if( li_StockPrice != NULL ) {
	
		memset( li_StockPrice,0x00, sizeof(long) * st_stock_base.Days );
	
		// 일수만큼 STOCK DATA 계산
		for( i = 0; i < st_stock_base.Days; i++ ) {
			
			rtn = GenerateStockData(&st_stock_base,i,(long *)&li_StockPrice[i]);
			
			if ( rtn == RETURN_FALSE ) {
				
				log_printf( ERR_ARG,"-------------------------" );
				log_printf( ERR_ARG,"주가 일별 생성중 에러 발생" );
				log_printf( ERR_ARG,"-------------------------" );
				
				free(li_StockPrice);
				return (RETURN_FALSE);
				
			}
			/*
			log_printf( DBG_ARG,">>>>>>>>>>>>>>>>>>>>>>>>>" );
			log_printf( DBG_ARG,"[%04d] PRICE : [%ld]" , i, li_StockPrice[i] );
			log_printf( DBG_ARG,">>>>>>>>>>>>>>>>>>>>>>>>>" );
			*/
						
		} 	
		// END OF FOR LOOP
	}
	// END OF IF
	
	//-------------------------------------------------------------------------
	// TODO : 종목정보와 함께 데이터 저장
		
	// ----------------------------------------------------
	// 금액을 생성하다 오류날 경우에 INSERT ROLLBACK 이 힘드므로 어레이에 담아 놓았다가
	// 정상 생성이 되면 한방에 INSERT 후 COMMIT
	{
		// MERGE INTO
	}
	/*
	EXEC SQL COMMIT WORK;
	*/
	//-------------------------------------------------------------------------
	// 종목정보와 함께 데이터 저장 종료
	//-------------------------------------------------------------------------
	
	free(li_StockPrice);
	// 주가 기본 정보 생성 종료
	//-------------------------------------------------------------------------
    return (RETURN_TRUE);
}

/***********************************************************
    주가 일별 생성
***********************************************************/
int GenerateStockData( STOCK_BASE *st_stock_base, int Day, long *StockPrice ) {

	long lc_StockPrice = 0;
	//---------------------------------------------------------------
	// 주가 일별 생성
	
	//---------------------------------------------------------------
	// 주가 일별 생성 결과저장
	(* StockPrice) = lc_StockPrice;
	//-------------------------------------------------------------------------
    return (RETURN_TRUE);
	
}

/***********************************************************
    종목 기본정보 출력
***********************************************************/
void PrintStockInfoData( STOCK_INFO_RSLT *stock_info_rslt )
{
    log_printf( DBG_ARG,">>>>>>>>>>>>>>>>>>>>>>>>>" );
    log_printf( DBG_ARG,"종목번호    :[%s]" ,stock_info_rslt->STOCK_NO );
    log_printf( DBG_ARG,"종목명      :[%s]" ,stock_info_rslt->STOCK_NM );
    log_printf( DBG_ARG,"상장일      :[%s]" ,stock_info_rslt->OPEN_DT	 );
    log_printf( DBG_ARG,"지역명      :[%s]" ,stock_info_rslt->AREA_NM	 );
    log_printf( DBG_ARG,">>>>>>>>>>>>>>>>>>>>>>>>>" );
}

/***********************************************************
    주가생성 기준정보 출력
***********************************************************/
void PrintStockBaseData( STOCK_BASE *st_stock_base )
{
    log_printf( DBG_ARG,">>>>>>>>>>>>>>>>>>>>>>>>>" );
    log_printf( DBG_ARG,"시작가      :[%ld]"     ,st_stock_base->StrtPrice  );
    log_printf( DBG_ARG,"변화비율    :[%04f]"    ,st_stock_base->ChngRatio  );
    log_printf( DBG_ARG,"계산방식    :[%d]"      ,st_stock_base->CalcType   );
    log_printf( DBG_ARG,"확률분포    :[%04f]"    ,st_stock_base->PrblDist   );
    log_printf( DBG_ARG,"LEVY 알파   :[%04f]"    ,st_stock_base->LevyAlpha  );
    log_printf( DBG_ARG,"LEVY 팩터   :[%04f]"    ,st_stock_base->LevyFactor );
    log_printf( DBG_ARG,"계산일수    :[%ld]"     ,st_stock_base->Days       );
    log_printf( DBG_ARG,">>>>>>>>>>>>>>>>>>>>>>>>>" );
}

/* EOF */
